ADCPROP_ASYNCTHREADPRIORITY_ENUM

For an RDS Recordset object, specifies the execution priority of the asynchronous thread that retrieves data.

Use these constants with the Recordset "Background Thread Priority" dynamic property, which is referenced in the ADO-to-OLE DB Dynamic Property index and documented in the Microsoft Cursor Service for OLE DB documentation.
Constant 	Value 	Description
adPriorityAboveNormal 	4 	Sets priority between normal and highest.
adPriorityBelowNormal 	2 	Sets priority between lowest and normal.
adPriorityHighest 	5 	Sets priority to the highest possible.
AdPriorityLowest 	1 	Sets priority to the lowest possible.
adPriorityNormal 	3 	Sets priority to normal.



ADCPROP_AUTORECALC_ENUM

Specifies when the MSDataShape provider re-calculates aggregate and calculated columns in a hierarchical Recordset.

These constants are only used with the MSDataShape provider and the Recordset "Auto Recalc" dynamic property, which is referenced in the ADO Dynamic Property Index and documented in the Microsoft Cursor Service for OLE DB or Microsoft Data Shaping Service for OLE DB documentation.
Constant 	Value 	Description
adRecalcAlways 	1 	Default. Recalculates whenever the MSDataShape provider determines values that the calculated columns depend upon have changed.
adRecalcUpFront 	0 	Calculates only when initially building the hierarchical Recordset.




ADCPROP_UPDATECRITERIA_ENUM

Specifies which fields can be used to detect conflicts during an optimistic update of a row of the data source with a Recordset object.

Use these constants with the Recordset "Update Criteria" dynamic property, which is referenced in the ADO Dynamic Property Index and documented in the Microsoft Cursor Service for OLE DB documentation.
Constant 	Value 	Description
adCriteriaAllCols 	1 	Detects conflicts if any column of the data source row has been changed.
adCriteriaKey 	0 	Detects conflicts if the key column of the data source row has been changed, which means that the row has been deleted.
adCriteriaTimeStamp 	3 	Detects conflicts if the timestamp of the data source row has been changed, which means the row has been accessed after the Recordset was obtained.
adCriteriaUpdCols 	2 	Detects conflicts if any of the columns of the data source row that correspond to updated fields of the Recordset have been changed.




ADCPROP_UPDATERESYNC_ENUM

Specifies whether the UpdateBatch method is followed by an implicit Resync method operation and if so, the scope of that operation.
Constant 	Value 	Description
adResyncAll 	15 	Invokes Resync with the combined value of all the other ADCPROP_UPDATERESYNC_ENUM members.
adResyncAutoIncrement 	1 	Default. Attempts to retrieve the new identity value for columns that are automatically incremented or generated by the data source, such as Microsoft Jet AutoNumber fields or Microsoft SQL Server Identity columns.
adResyncConflicts 	2 	Invokes Resync for all rows in which the update or delete operation failed because of a concurrency conflict.
adResyncInserts 	8 	Invokes Resync for all successfully inserted rows. However, AutoIncrement column values are not resynchronized. Instead, the contents of newly inserted rows are resynchronized based on the existing primary key value. If the primary key is an AutoIncrement value, Resync won't retrieve the contents of the intended row. For automatically incrementing AutoIncrement primary key values, call UpdateBatch with the combined value adResyncAutoIncrement + adResyncInserts.
adResyncNone 	0 	Does not invoke Resync.
adResyncUpdates 	4 	Invokes Resync for all successfully updated rows.




AffectEnum

Specifies which records are affected by an operation.
Constant 	Value 	Description
adAffectAll 	3 	If there is not a Filter applied to the Recordset, affects all records.

If the Filter property is set to a string criteria (such as "Author='Smith'"), then the operation affects visible records in the current chapter.

If the Filter property is set to a member of the FilterGroupEnum or an array of Bookmarks, then the operation will affect all rows of the Recordset.

Note   adAffectAll is hidden in the Visual Basic Object Browser.
adAffectAllChapters 	4 	Affects all records in all sibling chapters of the Recordset, including those not visible via any Filter that is currently applied.
adAffectCurrent 	1 	Affects only the current record.
adAffectGroup 	2 	Affects only records that satisfy the current Filter property setting. You must set the Filter property to a FilterGroupEnum value or an array of Bookmarks to use this option.




BookmarkEnum

Specifies a bookmark indicating where the operation should begin.
Constant 	Value 	Description
adBookmarkCurrent 	0 	Starts at the current record.
adBookmarkFirst 	1 	Starts at the first record.
adBookmarkLast 	2 	Starts at the last record.




CommandTypeEnum

Specifies how a command argument should be interpreted.
Constant 	Value 	Description
adCmdUnspecified 	-1 	Does not specify the command type argument.
adCmdText 	1 	Evaluates CommandText as a textual definition of a command or stored procedure call.
adCmdTable 	2 	Evaluates CommandText as a table name whose columns are all returned by an internally generated SQL query.
adCmdStoredProc 	4 	Evaluates CommandText as a stored procedure name.
adCmdUnknown 	8 	Default. Indicates that the type of command in the CommandText property is not known.
adCmdFile 	256 	Evaluates CommandText as the file name of a persistently stored Recordset. Used with Recordset.Open or Requery only.
adCmdTableDirect 	512 	Evaluates CommandText as a table name whose columns are all returned. Used with Recordset.Open or Requery only. To use the Seek method, the Recordset must be opened with adCmdTableDirect.

This value cannot be combined with the ExecuteOptionEnum value adAsyncExecute.




CompareEnum

Specifies the relative position of two records represented by their bookmarks.
Constant 	Value 	Description
adCompareEqual 	1 	Indicates that the bookmarks are equal.
adCompareGreaterThan 	2 	Indicates that the first bookmark is after the second.
adCompareLessThan 	0 	Indicates that the first bookmark is before the second.
adCompareNotComparable 	4 	Indicates that the bookmarks cannot be compared.
adCompareNotEqual 	3 	Indicates that the bookmarks are not equal and not ordered.




ConnectModeEnum

Specifies the available permissions for modifying data in a Connection, opening a Record, or specifying values for the Mode property of the Record and Stream objects.
Constant 	Value 	Description
adModeRead 	1 	Indicates read-only permissions.
adModeReadWrite 	3 	Indicates read/write permissions.
adModeRecursive 	0x400000 	Used in conjunction with the other *ShareDeny* values (adModeShareDenyNone, adModeShareDenyWrite, or adModeShareDenyRead) to propagate sharing restrictions to all sub-records of the current Record. It has no affect if the Record does not have any children. A run-time error is generated if it is used with adModeShareDenyNone only. However, it can be used with adModeShareDenyNone when combined with other values. For example, you can use "adModeRead Or adModeShareDenyNone Or adModeRecursive".
adModeShareDenyNone 	16 	Allows others to open a connection with any permissions. Neither read nor write access can be denied to others.
adModeShareDenyRead 	4 	Prevents others from opening a connection with read permissions.
adModeShareDenyWrite 	8 	Prevents others from opening a connection with write permissions.
adModeShareExclusive 	12 	Prevents others from opening a connection.
adModeUnknown 	0 	Default. Indicates that the permissions have not yet been set or cannot be determined.
adModeWrite 	2 	Indicates write-only permissions.




ConnectOptionEnum

Specifies whether the Open method of a Connection object should return after (synchronously) or before (asynchronously) the connection is established.
Constant 	Value 	Description
adAsyncConnect 	16 	Opens the connection asynchronously. The ConnectComplete event may be used to determine when the connection is available.
adConnectUnspecified 	-1 	Default. Opens the connection synchronously.




ConnectPromptEnum

Specifies whether a dialog box should be displayed to prompt for missing parameters when opening a connection to a data source.
Constant 	Value 	Description
adPromptAlways 	1 	Prompts always.
adPromptComplete 	2 	Prompts if more information is required.
adPromptCompleteRequired 	3 	Prompts if more information is required but optional parameters are not allowed.
adPromptNever 	4 	Never prompts.




CopyRecordOptionsEnum

Specifies the behavior of the CopyRecord method.
Constant 	Value 	Description
adCopyAllowEmulation 	4 	Indicates that the Source provider attempts to simulate the copy using download and upload operations if this method fails due to Destination being on a different server or is serviced by a different provider than Source. Note that differing provider capabilities may hamper performance or lose data.
adCopyNonRecursive 	2 	Copies the current directory, but none of its subdirectories, to the destination. The copy operation is not recursive.
adCopyOverWrite 	1 	Overwrites the file or directory if the Destination points to an existing file or directory.
adCopyUnspecified 	-1 	Default. Performs the default copy operation: The operation fails if the destination file or directory already exists, and the operation copies recursively.




CursorLocationEnum

Specifies the location of the cursor service.
Constant 	Value 	Description
adUseClient 	3 	Uses client-side cursors supplied by a local cursor library. Local cursor services often will allow many features that driver-supplied cursors may not, so using this setting may provide an advantage with respect to features that will be enabled. For backward compatibility, the synonym adUseClientBatch is also supported.
adUseNone 	1 	Does not use cursor services. (This constant is obsolete and appears solely for the sake of backward compatibility.)
adUseServer 	2 	Default. Uses data-provider or driver-supplied cursors. These cursors are sometimes very flexible and allow for additional sensitivity to changes others make to the data source. However, some features of the Microsoft Cursor Service for OLE DB (such as disassociated Recordset objects) cannot be simulated with server-side cursors and these features will be unavailable with this setting.




CursorOptionEnum

Specifies what functionality the Supports method should test for.
Constant 	Value 	Description
adAddNew 	0x1000400 	Supports the AddNew method to add new records.
adApproxPosition 	0x4000 	Supports the AbsolutePosition and AbsolutePage properties.
adBookmark 	0x2000 	Supports the Bookmark property to gain access to specific records.
adDelete 	0x1000800 	Supports the Delete method to delete records.
adFind 	0x80000 	Supports the Find method to locate a row in a Recordset.
adHoldRecords 	0x100 	Retrieves more records or changes the next position without committing all pending changes.
adIndex 	0x100000 	Supports the Index property to name an index.
adMovePrevious 	0x200 	Supports the MoveFirst and MovePrevious methods, and Move or GetRows methods to move the current record position backward without requiring bookmarks.
adNotify 	0x40000 	Indicates that the underlying data provider supports notifications (which determines whether Recordset events are supported).
adResync 	0x20000 	Supports the Resync method to update the cursor with the data that is visible in the underlying database.
adSeek 	0x200000 	Supports the Seek method to locate a row in a Recordset.
adUpdate 	0x1008000 	Supports the Update method to modify existing data.
adUpdateBatch 	0x10000 	Supports batch updating (UpdateBatch and CancelBatch methods) to transmit groups of changes to the provider.




CursorTypeEnum

Specifies the type of cursor used in a Recordset object.
Constant 	Value 	Description
adOpenDynamic 	2 	Uses a dynamic cursor. Additions, changes, and deletions by other users are visible, and all types of movement through the Recordset are allowed, except for bookmarks, if the provider doesn't support them.
adOpenForwardOnly 	0 	Default. Uses a forward-only cursor. Identical to a static cursor, except that you can only scroll forward through records. This improves performance when you need to make only one pass through a Recordset.
adOpenKeyset 	1 	Uses a keyset cursor. Like a dynamic cursor, except that you can't see records that other users add, although records that other users delete are inaccessible from your Recordset. Data changes by other users are still visible.
adOpenStatic 	3 	Uses a static cursor, which is a static copy of a set of records that you can use to find data or generate reports. Additions, changes, or deletions by other users are not visible.
adOpenUnspecified 	-1 	Does not specify the type of cursor.




DataTypeEnum

Specifies the data type of a Field, Parameter, or Property. The corresponding OLE DB type indicator is shown in parentheses in the description column of the following table. For more information about OLE DB data types, see Chapter 13: Data Types in OLE DB and Appendix A: Data Types of the OLE DB Programmer's Reference.
Constant 	Value 	Description
AdArray
(Does not apply to ADOX.) 	0x2000 	A flag value, always combined with another data type constant, that indicates an array of that other data type.
adBigInt 	20 	Indicates an eight-byte signed integer (DBTYPE_I8).
adBinary 	128 	Indicates a binary value (DBTYPE_BYTES).
adBoolean 	11 	Indicates a boolean value (DBTYPE_BOOL).
adBSTR 	8 	Indicates a null-terminated character string (Unicode) (DBTYPE_BSTR).
adChapter 	136 	Indicates a four-byte chapter value that identifies rows in a child rowset (DBTYPE_HCHAPTER).
adChar 	129 	Indicates a string value (DBTYPE_STR).
adCurrency 	6 	Indicates a currency value (DBTYPE_CY). Currency is a fixed-point number with four digits to the right of the decimal point. It is stored in an eight-byte signed integer scaled by 10,000.
adDate 	7 	Indicates a date value (DBTYPE_DATE). A date is stored as a double, the whole part of which is the number of days since December 30, 1899, and the fractional part of which is the fraction of a day.
adDBDate 	133 	Indicates a date value (yyyymmdd) (DBTYPE_DBDATE).
adDBTime 	134 	Indicates a time value (hhmmss) (DBTYPE_DBTIME).
adDBTimeStamp 	135 	Indicates a date/time stamp (yyyymmddhhmmss plus a fraction in billionths) (DBTYPE_DBTIMESTAMP).
adDecimal 	14 	Indicates an exact numeric value with a fixed precision and scale (DBTYPE_DECIMAL).
adDouble 	5 	Indicates a double-precision floating-point value (DBTYPE_R8).
adEmpty 	0 	Specifies no value (DBTYPE_EMPTY).
adError 	10 	Indicates a 32-bit error code (DBTYPE_ERROR).
adFileTime 	64 	Indicates a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (DBTYPE_FILETIME).
adGUID 	72 	Indicates a globally unique identifier (GUID) (DBTYPE_GUID).
adIDispatch 	9 	Indicates a pointer to an IDispatch interface on a COM object (DBTYPE_IDISPATCH).

Note   This data type is currently not supported by ADO. Usage may cause unpredictable results.
adInteger 	3 	Indicates a four-byte signed integer (DBTYPE_I4).
adIUnknown 	13 	Indicates a pointer to an IUnknown interface on a COM object (DBTYPE_IUNKNOWN).

Note   This data type is currently not supported by ADO. Usage may cause unpredictable results.
adLongVarBinary 	205 	Indicates a long binary value.
adLongVarChar 	201 	Indicates a long string value.
adLongVarWChar 	203 	Indicates a long null-terminated Unicode string value.
adNumeric 	131 	Indicates an exact numeric value with a fixed precision and scale (DBTYPE_NUMERIC).
adPropVariant 	138 	Indicates an Automation PROPVARIANT (DBTYPE_PROP_VARIANT).
adSingle 	4 	Indicates a single-precision floating-point value (DBTYPE_R4).
adSmallInt 	2 	Indicates a two-byte signed integer (DBTYPE_I2).
adTinyInt 	16 	Indicates a one-byte signed integer (DBTYPE_I1).
adUnsignedBigInt 	21 	Indicates an eight-byte unsigned integer (DBTYPE_UI8).
adUnsignedInt 	19 	Indicates a four-byte unsigned integer (DBTYPE_UI4).
adUnsignedSmallInt 	18 	Indicates a two-byte unsigned integer (DBTYPE_UI2).
adUnsignedTinyInt 	17 	Indicates a one-byte unsigned integer (DBTYPE_UI1).
adUserDefined 	132 	Indicates a user-defined variable (DBTYPE_UDT).
adVarBinary 	204 	Indicates a binary value (Parameter object only).
adVarChar 	200 	Indicates a string value.
adVariant 	12 	Indicates an Automation Variant (DBTYPE_VARIANT).

Note   This data type is currently not supported by ADO. Usage may cause unpredictable results.
adVarNumeric 	139 	Indicates a numeric value (Parameter object only).
adVarWChar 	202 	Indicates a null-terminated Unicode character string.
adWChar 	130 	Indicates a null-terminated Unicode character string (DBTYPE_WSTR).




EditModeEnum

Specifies the editing status of a record.
Constant 	Value 	Description
adEditNone 	0 	Indicates that no editing operation is in progress.
adEditInProgress 	1 	Indicates that data in the current record has been modified but not saved.
adEditAdd 	2 	Indicates that the AddNew method has been called, and the current record in the copy buffer is a new record that has not been saved in the database.
adEditDelete 	4 	Indicates that the current record has been deleted.




ErrorValueEnum

Specifies the type of ADO run-time error.

Three forms of the error number are listed:

    * Positive decimal--the low two bytes of the full number in decimal format. This number is displayed in the default Visual Basic error message dialog box. For example, Run-time error '3707'.
    * Negative decimal--The decimal translation of the full error number.
    * Hexadecimal--The hexadecimal representation of the full error number. The Windows facility code is in the fourth digit. The facility code for ADO error numbers is A. For example: 0x800A0E7B.

    Note   OLE DB errors may be passed to your ADO application. Typically, these can be identified by a Windows facility code of 4. For example, 0x8004.... For more information about these numbers, see Chapter 16: Errors of the OLE DB Programmer's Reference.

Constant 	Value 	Description
adErrBoundToCommand 	3707
-2146824581
0x800A0E7B 	Cannot change the ActiveConnection property of a Recordset object which has a Command object as its source.
adErrCannotComplete 	3732
-2146824556
0x800A0E94 	Server cannot complete the operation.
adErrCantChangeConnection 	3748
-2146824540
0x800A0EA4 	Connection was denied. New connection you requested has different characteristics than the one already in use.
adErrCantChangeProvider 	3220
-2146825068
0X800A0C94 	Supplied provider is different from the one already in use.
adErrCantConvertvalue 	3724
-2146824564
0x800A0E8C 	Data value cannot be converted for reasons other than sign mismatch or data overflow. For example, conversion would have truncated data.
adErrCantCreate 	3725
-2146824563
0x800A0E8D 	Data value cannot be set or retrieved because the field data type was unknown, or the provider had insufficient resources to perform the operation.
adErrCatalogNotSet 	3747
-2146824541
0x800A0EA3 	Operation requires a valid ParentCatalog.
adErrColumnNotOnThisRow 	3726
-2146824562
0x800A0E8E 	Record does not contain this field.
adErrDataConversion 	3421
-2146824867
0x800A0D5D 	Application uses a value of the wrong type for the current operation.
adErrDataOverflow 	3721
-2146824567
0x800A0E89 	Data value is too large to be represented by the field data type.
adErrDelResOutOfScope 	3738
-2146824550
0x800A0E9A 	URL of the object to be deleted is outside the scope of the current record.
adErrDenyNotSupported 	3750
-2146824538
0x800A0EA6 	Provider does not support sharing restrictions.
adErrDenyTypeNotSupported 	3751
-2146824537
0x800A0EA7 	Provider does not support the requested kind of sharing restriction.
adErrFeatureNotAvailable 	3251
-2146825037
0x800A0CB3 	Object or provider is not capable of performing requested operation.
adErrFieldsUpdateFailed 	3749
-2146824539
0x800A0EA5 	Fields update failed. For further information, examine the Status property of individual field objects.
adErrIllegalOperation 	3219
-2146825069
0x800A0C93 	Operation is not allowed in this context.
adErrIntegrityViolation 	3719
-2146824569
0x800A0E87 	Data value conflicts with the integrity constraints of the field.
adErrInTransaction 	3246
-2146825042
0x800A0CAE 	Connection object cannot be explicitly closed while in a transaction.
adErrInvalidArgument 	3001
-2146825287
0x800A0BB9 	Arguments are of the wrong type, are out of acceptable range, or are in conflict with one another.
adErrInvalidConnection 	3709
-2146824579
0x800A0E7D 	The connection cannot be used to perform this operation. It is either closed or invalid in this context.
adErrInvalidParamInfo 	3708
-2146824580
0x800A0E7C 	Parameter object is improperly defined. Inconsistent or incomplete information was provided.
adErrInvalidTransaction 	3714
-2146824574
0x800A0E82 	Coordinating transaction is invalid or has not started.
adErrInvalidURL 	3729
-2146824559
0x800A0E91 	URL contains invalid characters. Make sure the URL is typed correctly.
adErrItemNotFound 	3265
-2146825023
0x800A0CC1 	Item cannot be found in the collection corresponding to the requested name or ordinal.
adErrNoCurrentRecord 	3021
-2146825267
0x800A0BCD 	Either BOF or EOF is True, or the current record has been deleted. Requested operation requires a current record.
adErrNotExecuting 	3715
-2146824573
0x800A0E83 	Operation cannot be performed while not executing.
adErrNotReentrant 	3710
-2146824578
0x800A0E7E 	Operation cannot be performed while processing event.
adErrObjectClosed 	3704
-2146824584
0x800A0E78 	Operation is not allowed when the object is closed.
adErrObjectInCollection 	3367
-2146824921
0x800A0D27 	Object is already in collection. Cannot append.
adErrObjectNotSet 	3420
-2146824868
0x800A0D5C 	Object is no longer valid.
adErrObjectOpen 	3705
-2146824583
0x800A0E79 	Operation is not allowed when the object is open.
adErrOpeningFile 	3002
-2146825286
0x800A0BBA 	File could not be opened.
adErrOperationCancelled 	3712
-2146824576
0x800A0E80 	Operation has been cancelled by the user.
adErrOutOfSpace 	3734
-2146824554
0x800A0E96 	Operation cannot be performed. Provider cannot obtain enough storage space.
adErrPermissionDenied 	3720
-2146824568
0x800A0E88 	Insufficent permission prevents writing to the field.
adErrProviderFailed 	3000
-2146825288
0x800A0BB8 	Provider failed to perform the requested operation.
adErrProviderNotFound 	3706
-2146824582
0x800A0E7A 	Provider cannot be found. It may not be properly installed.
adErrReadFile 	3003
-2146825285
0x800A0BBB 	File could not be read.
adErrResourceExists 	3731
-2146824557
0x800A0E93 	Copy operation cannot be performed. Object named by destination URL already exists. Specify adCopyOverwrite to replace the object.
adErrResourceLocked 	3730
-2146824558
0x800A0E92 	Object represented by the specified URL is locked by one or more other processes. Wait until the process has finished and attempt the operation again.
adErrResourceOutOfScope 	3735
-2146824553
0x800A0E97 	Source or destination URL is outside the scope of the current record.
adErrSchemaViolation 	3722
-2146824566
0x800A0E8A 	Data value conflicts with the data type or constraints of the field.
adErrSignMismatch 	3723
-2146824565
0x800A0E8B 	Conversion failed because the data value was signed and the field data type used by the provider was unsigned.
adErrStillConnecting 	3713
-2146824575
0x800A0E81 	Operation cannot be performed while connecting aynchronously.
adErrStillExecuting 	3711
-2146824577
0x800A0E7F 	Operation cannot be performed while executing asynchronously.
adErrTreePermissionDenied 	3728
-2146824560
0x800A0E90 	Permissions are insufficient to access tree or subtree.
adErrUnavailable 	3736
-2146824552
0x800A0E98 	Operation failed to complete and the status is unavailable. The field may be unavailable or the operation was not attempted.
adErrUnsafeOperation 	3716
-2146824572
0x800A0E84 	Safety settings on this computer prohibit accessing a data source on another domain.
adErrURLDoesNotExist 	3727
-2146824561
0x800A0E8F 	Either the source URL or the parent of the destination URL does not exist.
adErrURLNamedRowDoesNotExist 	3737
-2146824551
0x800A0E99 	Record named by this URL does not exist.
adErrVolumeNotFound 	3733
-2146824555
0x800A0E95 	Provider cannot locate the storage device indicated by the URL. Make sure the URL is typed correctly.
adErrWriteFile 	3004
-2146825284
0x800A0BBC 	Write to file failed.
adWrnSecurityDialog 	3717
-2146824571
0x800A0E85 	For internal use only. Don't use.
adWrnSecurityDialogHeader 	3718
-2146824570
0x800A0E86 	For internal use only. Don't use.




ExecuteOptionEnum

Specifies how a provider should execute a command.
Constant 	Value 	Description
adAsyncExecute 	0x10 	Indicates that the command should execute asynchronously.

This value cannot be combined with the CommandTypeEnum value adCmdTableDirect.
adAsyncFetch 	0x20 	Indicates that the remaining rows after the initial quantity specified in the CacheSize property should be retrieved asynchronously.
adAsyncFetchNonBlocking 	0x40 	Indicates that the main thread never blocks while retrieving. If the requested row has not been retrieved, the current row automatically moves to the end of the file.

If you open a Recordset from a Stream containing a persistently stored Recordset, adAsyncFetchNonBlocking will not have an effect; the operation will be synchronous and blocking.

adAsynchFetchNonBlocking has no effect when the adCmdTableDirect option is used to open the Recordset.
adExecuteNoRecords 	0x80 	Indicates that the command text is a command or stored procedure that does not return rows (for example, a command that only inserts data). If any rows are retrieved, they are discarded and not returned.

adExecuteNoRecords can only be passed as an optional parameter to the Command or Connection Execute method.
adExecuteStream 	0x400 	Indicates that the results of a command execution should be returned as a stream.

adExecuteStream can only be passed as an optional parameter to the Command Execute method.
adExecuteRecord 	  	Indicates that the CommandText is a command or stored procedure that returns a single row which should be returned as a Record object.
adOptionUnspecified 	-1 	Indicates that the command is unspecified.




FieldEnum

Specifies the special fields referenced in a Record object's Fields collection.

Remarks

These constants provide a "shortcut" to accessing special fields associated with a Record. Retrieve the Field object from the Fields collection, and then obtain its contents with the Field object's Value property.
Constant 	Value 	Description
adDefaultStream 	-1 	References the field containing the default Stream object associated with a Record.
adRecordURL 	-2 	References the field containing the absolute URL string for the current Record.




FieldAttributeEnum

Specifies one or more attributes of a Field object.
Constant 	Value 	Description
adFldCacheDeferred 	0x1000 	Indicates that the provider caches field values and that subsequent reads are done from the cache.
adFldFixed 	0x10 	Indicates that the field contains fixed-length data.
adFldIsChapter 	0x2000 	Indicates that the field contains a chapter value, which specifies a specific child recordset related to this parent field. Typically chapter fields are used with data shaping or filters.
adFldIsCollection 	0x40000 	Indicates that the field specifies that the resource represented by the record is a collection of other resources, such as a folder, rather than a simple resource, such as a text file.
adFldIsDefaultStream 	0x20000 	Indicates that the field contains the default stream for the resource represented by the record. For example, the default stream can be the HTML content of a root folder on a Web site, which is automatically served when the root URL is specified.
adFldIsNullable 	0x20 	Indicates that the field accepts null values.
adFldIsRowURL 	0x10000 	Indicates that the field contains the URL that names the resource from the data store represented by the record.
adFldLong 	0x80 	Indicates that the field is a long binary field. Also indicates that you can use the AppendChunk and GetChunk methods.
adFldMayBeNull 	0x40 	Indicates that you can read null values from the field.
adFldMayDefer 	0x2 	Indicates that the field is deferred--that is, the field values are not retrieved from the data source with the whole record, but only when you explicitly access them.
adFldNegativeScale 	0x4000 	Indicates that the field represents a numeric value from a column that supports negative scale values. The scale is specified by the NumericScale property.
adFldRowID 	0x100 	Indicates that the field contains a persistent row identifier that cannot be written to and has no meaningful value except to identify the row (such as a record number, unique identifier, and so forth).
adFldRowVersion 	0x200 	Indicates that the field contains some kind of time or date stamp used to track updates.
adFldUnknownUpdatable 	0x8 	Indicates that the provider cannot determine if you can write to the field.
adFldUnspecified 	-1
0xFFFFFFFF 	Indicates that the provider does not specify the field attributes.
adFldUpdatable 	0x4 	Indicates that you can write to the field.




FieldStatusEnum

Specifies the status of a Field object.

The adFieldPending* values indicate the operation that caused the status to be set, and may be combined with other status values.
Constant 	Value 	Description
adFieldAlreadyExists 	26 	Indicates that the specified field already exists.
adFieldBadStatus 	12 	Indicates that an invalid status value was sent from ADO to the OLE DB provider. Possible causes include an OLE DB 1.0 or 1.1 provider, or an improper combination of Value and Status.
adFieldCannotComplete 	20 	Indicates that the server of the URL specified by Source could not complete the operation.
adFieldCannotDeleteSource 	23 	Indicates that during a move operation, a tree or subtree was moved to a new location, but the source could not be deleted.
adFieldCantConvertValue 	2 	Indicates that the field cannot be retrieved or stored without loss of data.
adFieldCantCreate 	7 	Indicates that the field could not be added because the provider exceeded a limitation (such as the number of fields allowed).
adFieldDataOverflow 	6 	Indicates that the data returned from the provider overflowed the data type of the field.
adFieldDefault 	13 	Indicates that the default value for the field was used when setting data.
adFieldDoesNotExist 	16 	Indicates that the field specified does not exist.
adFieldIgnore 	15 	Indicates that this field was skipped when setting data values in the source. The provider set no value.
adFieldIntegrityViolation 	10 	Indicates that the field cannot be modified because it is a calculated or derived entity.
adFieldInvalidURL 	17 	Indicates that the data source URL contains invalid characters.
adFieldIsNull 	3 	Indicates that the provider returned a VARIANT value of type VT_NULL and that the field is not empty.
adFieldOK 	0 	Default. Indicates that the field was successfully added or deleted.
adFieldOutOfSpace 	22 	Indicates that the provider is unable to obtain enough storage space to complete a move or copy operation.
adFieldPendingChange 	0x40000 	Indicates either that the field has been deleted and then re-added, perhaps with a different data type, or that the value of the field which previously had a status of adFieldOK has changed. The final form of the field will modify the Fields collection after the Update method is called.
adFieldPendingDelete 	0x20000 	Indicates that the Delete operation caused the status to be set. The field has been marked for deletion from the Fields collection after the Update method is called.
adFieldPendingInsert 	0x10000 	Indicates that the Append operation caused the status to be set. The Field has been marked to be added to the Fields collection after the Update method is called.
adFieldPendingUnknown 	0x80000 	Indicates that the provider cannot determine what operation caused field status to be set.
adFieldPendingUnknownDelete 	0x100000 	Indicates that the provider cannot determine what operation caused field status to be set, and that the field will be deleted from the Fields collection after the Update method is called.
adFieldPermissionDenied 	9 	Indicates that the field cannot be modified because it is defined as read-only.
adFieldReadOnly 	24 	Indicates that the field in the data source is defined as read-only.
adFieldResourceExists 	19 	Indicates that the provider was unable to perform the operation because an object already exists at the destination URL and it is not able to overwrite the object.
adFieldResourceLocked 	18 	Indicates that the provider was unable to perform the operation because the data source is locked by one or more other application or process.
adFieldResourceOutOfScope 	25 	Indicates that a source or destination URL is outside the scope of the current record.
adFieldSchemaViolation 	11 	Indicates that the value violated the data source schema constraint for the field.
adFieldSignMismatch 	5 	Indicates that data value returned by the provider was signed but the data type of the ADO field value was unsigned.
adFieldTruncated 	4 	Indicates that variable-length data was truncated when reading from the data source.
adFieldUnavailable 	8 	Indicates that the provider could not determine the value when reading from the data source. For example, the row was just created, the default value for the column was not available, and a new value had not yet been specified.
adFieldVolumeNotFound 	21 	Indicates that the provider is unable to locate the storage volume indicated by the URL.




FilterGroupEnum

Specifies the group of records to be filtered from a Recordset.
Constant 	Value 	Description
adFilterAffectedRecords 	2 	Filters for viewing only records affected by the last Delete, Resync, UpdateBatch, or CancelBatch call.
adFilterConflictingRecords 	5 	Filters for viewing the records that failed the last batch update.
adFilterFetchedRecords 	3 	Filters for viewing the records in the current cache--that is, the results of the last call to retrieve records from the database.
adFilterNone 	0 	Removes the current filter and restores all records for viewing.
adFilterPendingRecords 	1 	Filters for viewing only records that have changed but have not yet been sent to the server. Applicable only for batch update mode.




GetRowsOptionEnum

Specifies how many records to retrieve from a Recordset.
Constant 	Value 	Description
adGetRowsRest 	-1 	Retrieves the rest of the records in the Recordset, from either the current position or a bookmark specified by the Start parameter of the GetRows method.




IsolationLevelEnum

Specifies the level of transaction isolation for a Connection object.
Constant 	Value 	Description
adXactUnspecified 	-1 	Indicates that the provider is using a different isolation level than specified, but that the level cannot be determined.
adXactChaos 	16 	Indicates that pending changes from more highly isolated transactions cannot be overwritten.
adXactBrowse 	256 	Indicates that from one transaction you can view uncommitted changes in other transactions.
adXactReadUncommitted 	256 	Same as adXactBrowse.
adXactCursorStability 	4096 	Indicates that from one transaction you can view changes in other transactions only after they have been committed.
adXactReadCommitted 	4096 	Same as adXactCursorStability.
adXactRepeatableRead 	65536 	Indicates that from one transaction you cannot see changes made in other transactions, but that requerying can retrieve new Recordset objects.
adXactIsolated 	1048576 	Indicates that transactions are conducted in isolation of other transactions.
adXactSerializable 	1048576 	Same as adXactIsolated.




LineSeparatorsEnum

Specifies the character used as a line separator in text Stream objects.
Constant 	Value 	Description
adCR 	13 	Indicates carriage return.
adCRLF 	-1 	Default. Indicates carriage return line feed.
adLF 	10 	Indicates line feed.




LockTypeEnum

Specifies the type of lock placed on records during editing.
Constant 	Value 	Description
adLockBatchOptimistic 	4 	Indicates optimistic batch updates. Required for batch update mode.
adLockOptimistic 	3 	Indicates optimistic locking, record by record. The provider uses optimistic locking, locking records only when you call the Update method.
adLockPessimistic 	2 	Indicates pessimistic locking, record by record. The provider does what is necessary to ensure successful editing of the records, usually by locking records at the data source immediately after editing.
adLockReadOnly 	1 	Indicates read-only records. You cannot alter the data.
adLockUnspecified 	-1 	Does not specify a type of lock. For clones, the clone is created with the same lock type as the original.




MarshalOptionsEnum

Specifies which records should be returned to the server.
Constant 	Value 	Description
adMarshalAll 	0 	Default. Returns all rows to the server.
adMarshalModifiedOnly 	1 	Returns only modified rows to the server.




MoveRecordOptionsEnum

Specifies the behavior of the Record object MoveRecord method.
Constant 	Value 	Description
adMoveUnspecified 	-1 	Default. Performs the default move operation: The operation fails if the destination file or directory already exists, and the operation updates hypertext links.
adMoveOverWrite 	1 	Overwrites the destination file or directory, even if it already exists.
adMoveDontUpdateLinks 	2 	Modifies the default behavior of MoveRecord method by not updating the hypertext links of the source Record. The default behavior depends on the capabilities of the provider. Move operation updates links if the provider is capable. If the provider cannot fix links or if this value is not specified, then the move succeeds even when links have not been fixed.
adMoveAllowEmulation 	4 	Requests that the provider attempt to simulate the move (using download, upload, and delete operations). If the attempt to move the Record fails because the destination URL is on a different server or serviced by a different provider than the source, this may cause increased latency or data loss, due to different provider capabilities when moving resources between providers.




ObjectStateEnum

Specifies whether an object is open or closed, connecting to a data source, executing a command, or retrieving data.
Constant 	Value 	Description
adStateClosed 	0 	Indicates that the object is closed.
adStateOpen 	1 	Indicates that the object is open.
adStateConnecting 	2 	Indicates that the object is connecting.
adStateExecuting 	4 	Indicates that the object is executing a command.
adStateFetching 	8 	Indicates that the rows of the object are being retrieved.




ParameterAttributesEnum

Specifies the attributes of a Parameter object.
Constant 	Value 	Description
adParamSigned 	16 	Indicates that the parameter accepts signed values.
adParamNullable 	64 	Indicates that the parameter accepts null values.
adParamLong 	128 	Indicates that the parameter accepts long binary data.




ParameterDirectionEnum

Specifies whether the Parameter represents an input parameter, an output parameter, both an input and an output parameter, or the return value from a stored procedure.
Constant 	Value 	Description
adParamInput 	1 	Default. Indicates that the parameter represents an input parameter.
adParamInputOutput 	3 	Indicates that the parameter represents both an input and output parameter.
adParamOutput 	2 	Indicates that the parameter represents an output parameter.
adParamReturnValue 	4 	Indicates that the parameter represents a return value.
adParamUnknown 	0 	Indicates that the parameter direction is unknown.




PersistFormatEnum

Specifies the format in which to save a Recordset.
Constant 	Value 	Description
adPersistADTG 	0 	Indicates Microsoft Advanced Data TableGram (ADTG) format.
adPersistADO 	1 	Indicates that ADO's own Extensible Markup Language (XML) format will be used. This value is the same as adPersistXML and is included for backwards compatibility.
adPersistXML 	1 	Indicates Extensible Markup Language (XML) format.
adPersistProviderSpecific 	2 	Indicates that the provider will persist the Recordset using its own format.




PositionEnum

Specifies the current position of the record pointer within a Recordset.
Constant 	Value 	Description
adPosBOF 	-2 	Indicates that the current record pointer is at BOF (that is, the BOF property is True).
adPosEOF 	-3 	Indicates that the current record pointer is at EOF (that is, the EOF property is True).
adPosUnknown 	-1 	Indicates that the Recordset is empty, the current position is unknown, or the provider does not support the AbsolutePage or AbsolutePosition property.




PropertyAttributesEnum

Specifies the attributes of a Property object.
Constant 	Value 	Description
adPropNotSupported 	0 	Indicates that the property is not supported by the provider.
adPropRequired 	1 	Indicates that the user must specify a value for this property before the data source is initialized.
adPropOptional 	2 	Indicates that the user does not need to specify a value for this property before the data source is initialized.
adPropRead 	512 	Indicates that the user can read the property.
adPropWrite 	1024 	Indicates that the user can set the property.




RecordCreateOptionsEnum

Specifies whether an existing Record should be opened or a new Record created for the Record object Open method. The values can be combined with an AND operator.
Constant 	Value 	Description
adCreateCollection 	0x2000 	Creates a new Record at the node specified by Source parameter, instead of opening an existing Record. If the source points to an existing node, then a run-time error occurs, unless adCreateCollection is combined with adOpenIfExists or adCreateOverwrite.
adCreateNonCollection 	0 	Creates a new Record of type adSimpleRecord.
adCreateOverwrite 	0x4000000 	Modifies the creation flags adCreateCollection, adCreateNonCollection, and adCreateStructDoc. When OR is used with this value and one of the creation flag values, if the source URL points to an existing node or Record, then the existing Record is overwritten and a new one is created in its place. This value cannot be used together with adOpenIfExists.
adCreateStructDoc 	0x80000000 	Creates a new Record of type adStructDoc, instead of opening an existing Record.
adFailIfNotExists 	-1 	Default. Results in a run-time error if Source points to a non-existent node.
adOpenIfExists 	0x2000000 	Modifies the creation flags adCreateCollection, adCreateNonCollection, and adCreateStructDoc. When OR is used with this value and one of the creation flag values, if the source URL points to an existing node or Record object, then the provider must open the existing Record instead of creating a new one. This value cannot be used together with adCreateOverwrite.




RecordOpenOptionsEnum

Specifies options for opening a Record. These values may be combined by using OR.
Constant 	Value 	Description
adDelayFetchFields 	0x8000 	Indicates to the provider that the fields associated with the Record need not be retrieved initially, but can be retrieved at the first attempt to access the field. The default behavior, indicated by the absence of this flag, is to retrieve all the Record object fields.
adDelayFetchStream 	0x4000 	Indicates to the provider that the default stream associated with the Record need not be retrieved initially. The default behavior, indicated by the absence of this flag, is to retrieve the default stream associated with the Record object.
adOpenAsync 	0x1000 	Indicates that the Record object is opened in asynchronous mode.
adOpenExecuteCommand 	0x10000 	Indicates that the Source string contains command text that should be executed. This value is equivalent to the adCmdText option on Recordset.Open.
adOpenRecordUnspecified 	-1 	Default. Indicates no options are specified.
adOpenOutput 	0x800000 	Indicates that if the source points to a node that contains an executable script (such as an .ASP page), then the opened Record will contain the results of the executed script. This value is only valid with non-collection records.




RecordStatusEnum

Specifies the status of a record with regard to batch updates and other bulk operations.
Constant 	Value 	Description
adRecCanceled 	0x100 	Indicates that the record was not saved because the operation was canceled.
adRecCantRelease 	0x400 	Indicates that the new record was not saved because the existing record was locked.
adRecConcurrencyViolation 	0x800 	Indicates that the record was not saved because optimistic concurrency was in use.
adRecDBDeleted 	0x40000 	Indicates that the record has already been deleted from the data source.
adRecDeleted 	0x4 	Indicates that the record was deleted.
adRecIntegrityViolation 	0x1000 	Indicates that the record was not saved because the user violated integrity constraints.
adRecInvalid 	0x10 	Indicates that the record was not saved because its bookmark is invalid.
adRecMaxChangesExceeded 	0x2000 	Indicates that the record was not saved because there were too many pending changes.
adRecModified 	0x2 	Indicates that the record was modified.
adRecMultipleChanges 	0x40 	Indicates that the record was not saved because it would have affected multiple records.
adRecNew 	0x1 	Indicates that the record is new.
adRecObjectOpen 	0x4000 	Indicates that the record was not saved because of a conflict with an open storage object.
adRecOK 	0 	Indicates that the record was successfully updated.
adRecOutOfMemory 	0x8000 	Indicates that the record was not saved because the computer has run out of memory.
adRecPendingChanges 	0x80 	Indicates that the record was not saved because it refers to a pending insert.
adRecPermissionDenied 	0x10000 	Indicates that the record was not saved because the user has insufficient permissions.
adRecSchemaViolation 	0x20000 	Indicates that the record was not saved because it violates the structure of the underlying database.
adRecUnmodified 	0x8 	Indicates that the record was not modified.




RecordTypeEnum

Specifies the type of Record object.
Constant 	Value 	Description
adSimpleRecord 	0 	Indicates a simple record (does not contain child nodes).
adCollectionRecord 	1 	Indicates a collection record (contains child nodes).
adRecordUnknown 	-1 	Indicates that the type of this Record is unknown.
adStructDoc 	2 	Indicates a special kind of collection record that represents COM structured documents.




ResyncEnum

Specifies whether underlying values are overwritten by a call to Resync.
Constant 	Value 	Description
adResyncAllValues 	2 	Default. Overwrites data, and pending updates are canceled.
adResyncUnderlyingValues 	1 	Does not overwrite data, and pending updates are not canceled.




SaveOptionsEnum

Specifies whether a file should be created or overwritten when saving from a Stream object. The values can be combined with an AND operator.
Constant 	Value 	Description
adSaveCreateNotExist 	1 	Default. Creates a new file if the file specified by the FileName parameter does not already exist.
adSaveCreateOverWrite 	2 	Overwrites the file with the data from the currently open Stream object, if the file specified by the Filename parameter already exists.




SchemaEnum

Specifies the type of schema Recordset that the OpenSchema method retrieves.

Remarks

Additional information about the function and columns returned for each ADO constant can be found in topics of Appendix B: Schema Rowsets of the OLE DB Programmers Reference. The name of each topic is listed in parentheses in the Description section of the table below.

Additional information about the function and columns returned for each ADO MD constant can be found in topics of Chapter 23: OLE DB for OLAP Objects and Schema Rowsets of the OLE DB for OLAP documentation. The name of each topic is listed in parentheses and marked with an asterisk (*) in the Description column of the table below.

You can translate the data types of columns in the OLE DB documentation to ADO data types by referring to the Description column of the ADO DataTypeEnum topic. For example, an OLE DB data type of DBTYPE_WSTR is equivalent to an ADO data type of adWChar.

ADO generates schema-like results for the constants, adSchemaDBInfoKeywords and adSchemaDBInfoLiterals. ADO creates a Recordset, then fills each row with the values returned respectively by the IDBInfo::GetKeywords and IDBInfo::GetLiteralInfo methods. Additional information about these methods can be found in the IDBInfo section of the OLE DB Programmer's Reference.
Constant 	Value 	Description 	Constraint Columns
adSchemaAsserts 	0 	Returns the assertions defined in the catalog that are owned by a given user.

(ASSERTIONS Rowset)
	CONSTRAINT_CATALOG
CONSTRAINT_SCHEMA
CONSTRAINT_NAME
adSchemaCatalogs 	1 	Returns the physical attributes associated with catalogs accessible from the DBMS.

(CATALOGS Rowset)
	CATALOG_NAME
adSchemaCharacterSets 	2 	Returns the character sets defined in the catalog that are accessible to a given user.

(CHARACTER_SETS Rowset)
	CHARACTER_SET_CATALOG
CHARACTER_SET_SCHEMA
CHARACTER_SET_NAME
adSchemaCheckConstraints 	5 	Returns the check constraints defined in the catalog that are owned by a given user.

(CHECK_CONSTRAINTS Rowset)
	CONSTRAINT_CATALOG
CONSTRAINT_SCHEMA
CONSTRAINT_NAME
adSchemaCollations 	3 	Returns the character collations defined in the catalog that are accessible to a given user.

(COLLATIONS Rowset)
	COLLATION_CATALOG
COLLATION_SCHEMA
COLLATION_NAME
adSchemaColumnPrivileges 	13 	Returns the privileges on columns of tables defined in the catalog that are available to, or granted by, a given user.

(COLUMN_PRIVILEGES Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
COLUMN_NAME
GRANTOR
GRANTEE
adSchemaColumns 	4 	Returns the columns of tables (including views) defined in the catalog that are accessible to a given user.

(COLUMNS Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
COLUMN_NAME
adSchemaColumnsDomainUsage 	11 	Returns the columns defined in the catalog that are dependent on a domain defined in the catalog and owned by a given user.

(COLUMN_DOMAIN_USAGE Rowset)
	DOMAIN_CATALOG
DOMAIN_SCHEMA
DOMAIN_NAME
COLUMN_NAME
adSchemaConstraintColumnUsage 	6 	Returns the columns used by referential constraints, unique constraints, check constraints, and assertions, defined in the catalog and owned by a given user.

(CONSTRAINT_COLUMN_USAGE Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
COLUMN_NAME
adSchemaConstraintTableUsage 	7 	Returns the tables that are used by referential constraints, unique constraints, check constraints, and assertions defined in the catalog and owned by a given user.

(CONSTRAINT_TABLE_USAGE Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
adSchemaCubes 	32 	Returns information about the available cubes in a schema (or the catalog, if the provider does not support schemas).

(CUBES Rowset*)
	CATALOG_NAME
SCHEMA_NAME
CUBE_NAME
adSchemaDBInfoKeywords 	30 	Returns a list of provider-specific keywords.

(IDBInfo::GetKeywords*)
	<None>
adSchemaDBInfoLiterals 	31 	Returns a list of provider-specific literals used in text commands.

(IDBInfo::GetLiteralInfo*)
	<None>
adSchemaDimensions 	33 	Returns information about the dimensions in a given cube. It has one row for each dimension.

(DIMENSIONS Rowset*)
	CATALOG_NAME
SCHEMA_NAME
CUBE_NAME
DIMENSION_NAME
DIMENSION_UNIQUE_NAME
adSchemaForeignKeys 	27 	Returns the foreign key columns defined in the catalog by a given user.

(FOREIGN_KEYS Rowset)
	PK_TABLE_CATALOG
PK_TABLE_SCHEMA
PK_TABLE_NAME
FK_TABLE_CATALOG
FK_TABLE_SCHEMA
FK_TABLE_NAME
adSchemaHierarchies 	34 	Returns information about the hierarchies available in a dimension.

(HIERARCHIES Rowset*)
	CATALOG_NAME
SCHEMA_NAME
CUBE_NAME
DIMENSION_UNIQUE_NAME
HIERARCHY_NAME
HIERARCHY_UNIQUE_NAME
adSchemaIndexes 	12 	Returns the indexes defined in the catalog that are owned by a given user.

(INDEXES Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
INDEX_NAME
TYPE
TABLE_NAME
adSchemaKeyColumnUsage 	8 	Returns the columns defined in the catalog that are constrained as keys by a given user.

(KEY_COLUMN_USAGE Rowset)
	CONSTRAINT_CATALOG
CONSTRAINT_SCHEMA
CONSTRAINT_NAME
TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
COLUMN_NAME
adSchemaLevels 	35 	Returns information about the levels available in a dimension.

(LEVELS Rowset*)
	CATALOG_NAME
SCHEMA_NAME
CUBE_NAME
DIMENSION_UNIQUE_NAME
HIERARCHY_UNIQUE_NAME
LEVEL_NAME
LEVEL_UNIQUE_NAME
adSchemaMeasures 	36 	Returns information about the available measures.

(MEASURES Rowset*)
	CATALOG_NAME
SCHEMA_NAME
CUBE_NAME
MEASURE_NAME
MEASURE_UNIQUE_NAME
adSchemaMembers 	38 	Returns information about the available members.

(MEMBERS Rowset*)
	CATALOG_NAME
SCHEMA_NAME
CUBE_NAME
DIMENSION_UNIQUE_NAME
HIERARCHY_UNIQUE_NAME
LEVEL_UNIQUE_NAME
LEVEL_NUMBER
MEMBER_NAME
MEMBER_UNIQUE_NAME
MEMBER_CAPTION
MEMBER_TYPE
Tree operator (For more information, see the OLE DB for OLAP documentation.)
adSchemaPrimaryKeys 	28 	Returns the primary key columns defined in the catalog by a given user.

(PRIMARY_KEYS Rowset)
	PK_TABLE_CATALOG
PK_TABLE_SCHEMA
PK_TABLE_NAME
adSchemaProcedureColumns 	29 	Returns information about the columns of rowsets returned by procedures.

(PROCEDURE_COLUMNS Rowset)
	PROCEDURE_CATALOG
PROCEDURE_SCHEMA
PROCEDURE_NAME
COLUMN_NAME
adSchemaProcedureParameters 	26 	Returns information about the parameters and return codes of procedures.

(PROCEDURE_PARAMETERS Rowset)
	PROCEDURE_CATALOG
PROCEDURE_SCHEMA
PROCEDURE_NAME
PARAMETER_NAME
adSchemaProcedures 	16 	Returns the procedures defined in the catalog that are owned by a given user.

(PROCEDURES Rowset)
	PROCEDURE_CATALOG
PROCEDURE_SCHEMA
PROCEDURE_NAME
PROCEDURE_TYPE
adSchemaProperties 	37 	Returns information about the available properties for each level of the dimension.

(PROPERTIES Rowset*)
	CATALOG_NAME
SCHEMA_NAME
CUBE_NAME
DIMENSION_UNIQUE_NAME
HIERARCHY_UNIQUE_NAME
LEVEL_UNIQUE_NAME
MEMBER_UNIQUE_NAME
PROPERTY_TYPE
PROPERTY_NAME
adSchemaProviderSpecific 	-1 	Used if the provider defines its own nonstandard schema queries. 	<Provider specific>
adSchemaProviderTypes 	22 	Returns the (base) data types supported by the data provider.

(PROVIDER_TYPES Rowset)
	DATA_TYPE
BEST_MATCH
AdSchemaReferentialConstraints 	9 	Returns the referential constraints defined in the catalog that are owned by a given user.

(REFERENTIAL_CONSTRAINTS Rowset)
	CONSTRAINT_CATALOG
CONSTRAINT_SCHEMA
CONSTRAINT_NAME
adSchemaSchemata 	17 	Returns the schemas (database objects) that are owned by a given user.

(SCHEMATA Rowset)
	CATALOG_NAME
SCHEMA_NAME
SCHEMA_OWNER
adSchemaSQLLanguages 	18 	Returns the conformance levels, options, and dialects supported by the SQL-implementation processing data defined in the catalog.

(SQL_LANGUAGES Rowset)
	<None>
adSchemaStatistics 	19 	Returns the statistics defined in the catalog that are owned by a given user.

(STATISTICS Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
adSchemaTableConstraints 	10 	Returns the table constraints defined in the catalog that are owned by a given user.

(TABLE_CONSTRAINTS Rowset)
	CONSTRAINT_CATALOG
CONSTRAINT_SCHEMA
CONSTRAINT_NAME
TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
CONSTRAINT_TYPE
adSchemaTablePrivileges 	14 	Returns the privileges on tables defined in the catalog that are available to, or granted by, a given user.

(TABLE_PRIVILEGES Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
GRANTOR
GRANTEE
adSchemaTables 	20 	Returns the tables (including views) defined in the catalog that are accessible to a given user.

(TABLES Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
TABLE_TYPE
adSchemaTranslations 	21 	Returns the character translations defined in the catalog that are accessible to a given user.

(TRANSLATIONS Rowset)
	TRANSLATION_CATALOG
TRANSLATION_SCHEMA
TRANSLATION_NAME
adSchemaTrustees 	39 	Reserved for future use. 	 
adSchemaUsagePrivileges 	15 	Returns the USAGE privileges on objects defined in the catalog that are available to, or granted by, a given user.

(USAGE_PRIVILEGES Rowset)
	OBJECT_CATALOG
OBJECT_SCHEMA
OBJECT_NAME
OBJECT_TYPE
GRANTOR
GRANTEE
adSchemaViewColumnUsage 	24 	Returns the columns on which viewed tables, defined in the catalog and owned by a given user, are dependent.

(VIEW_COLUMN_USAGE Rowset)
	VIEW_CATALOG
VIEW_SCHEMA
VIEW_NAME
adSchemaViews 	23 	Returns the views defined in the catalog that are accessible to a given user.

(VIEWS Rowset)
	TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
adSchemaViewTableUsage 	25 	Returns the tables on which viewed tables, defined in the catalog and owned by a given user, are dependent.

(VIEW_TABLE_USAGE Rowset)
	VIEW_CATALOG
VIEW_SCHEMA
VIEW_NAME




SearchDirectionEnum

Specifies the direction of a record search within a Recordset.
Constant 	Value 	Description
adSearchBackward 	-1 	Searches backward, stopping at the beginning of the Recordset. If a match is not found, the record pointer is positioned at BOF.
adSearchForward 	1 	Searches forward, stopping at the end of the Recordset. If a match is not found, the record pointer is positioned at EOF.




SeekEnum

Specifies the type of Seek to execute.
Constant 	Value 	Description
adSeekFirstEQ 	1 	Seeks the first key equal to KeyValues.
adSeekLastEQ 	2 	Seeks the last key equal to KeyValues.
adSeekAfterEQ 	4 	Seeks either a key equal to KeyValues or just after where that match would have occurred.
adSeekAfter 	8 	Seeks a key just after where a match with KeyValues would have occurred.
adSeekBeforeEQ 	16 	Seeks either a key equal to KeyValues or just before where that match would have occurred.
adSeekBefore 	32 	Seeks a key just before where a match with KeyValues would have occurred.




StreamOpenOptionsEnum

Specifies options for opening a Stream object. The values can be combined with an OR operation.
Constant 	Value 	Description
adOpenStreamAsync 	1 	Opens the Stream object in asynchronous mode.
adOpenStreamFromRecord 	4 	Identifies the contents of the Source parameter to be an already open Record object. The default behavior is to treat Source as a URL that points directly to a node in a tree structure. The default stream associated with that node is opened.
adOpenStreamUnspecified 	-1 	Default. Specifies opening the Stream object with default options.




StreamReadEnum

Specifies whether the whole stream or the next line should be read from a Stream object.
Constant 	Value 	Description
adReadAll 	-1 	Default. Reads all bytes from the stream, from the current position onwards to the EOS marker. This is the only valid StreamReadEnum value with binary streams (Type is adTypeBinary).
adReadLine 	-2 	Reads the next line from the stream (designated by the LineSeparator property).




StreamTypeEnum

Specifies the type of data stored in a Stream object.
Constant 	Value 	Description
adTypeBinary 	1 	Indicates binary data.
adTypeText 	2 	Default. Indicates text data, which is in the character set specified by Charset.




StreamWriteEnum

Specifies whether a line separator is appended to the string written to a Stream object.
Constant 	Value 	Description
adWriteChar 	0 	Default. Writes the specified text string (specified by the Data parameter) to the Stream object.
adWriteLine 	1 	Writes a text string and a line separator character to a Stream object. If the LineSeparator property is not defined, then this returns a run-time error.




StringFormatEnum

Specifies the format when retrieving a Recordset as a string.
Constant 	Value 	Description
adClipString 	2 	Delimits rows by RowDelimiter, columns by ColumnDelimiter, and null values by NullExpr. These three parameters of the GetString method are valid only with a StringFormat of adClipString.




XactAttributeEnum

Specifies the transaction attributes of a Connection object.
Constant 	Value 	Description
adXactAbortRetaining 	262144 	Performs retaining aborts--that is, calling RollbackTrans automatically starts a new transaction. Not all providers support this.
adXactCommitRetaining 	131072 	Performs retaining commits--that is, calling CommitTrans automatically starts a new transaction. Not all providers support this.

